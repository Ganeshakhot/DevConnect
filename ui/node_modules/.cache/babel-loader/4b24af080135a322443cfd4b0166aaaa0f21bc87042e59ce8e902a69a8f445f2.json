{"ast":null,"code":"import React from'react';import{Navigate}from'react-router-dom';import{connect}from'react-redux';import Spinner from'../layout/Spinner';import{jsx as _jsx}from\"react/jsx-runtime\";const PrivateRoute=_ref=>{let{component:Component,auth:{isAuthenticated,loading}}=_ref;if(loading)return/*#__PURE__*/_jsx(Spinner,{});if(isAuthenticated)return/*#__PURE__*/_jsx(Component,{});return/*#__PURE__*/_jsx(Navigate,{to:\"/login\"});};const mapStateToProps=state=>({auth:state.auth});export default connect(mapStateToProps)(PrivateRoute);","map":{"version":3,"names":["React","Navigate","connect","Spinner","jsx","_jsx","PrivateRoute","_ref","component","Component","auth","isAuthenticated","loading","to","mapStateToProps","state"],"sources":["D:/DevConnect/ui/src/components/routing/PrivateRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../layout/Spinner';\r\n\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  auth: { isAuthenticated, loading }\r\n}) => {\r\n  if (loading) return <Spinner />;\r\n  if (isAuthenticated) return <Component />;\r\n\r\n  return <Navigate to=\"/login\" />;\r\n};\r\n\r\nPrivateRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,KAAQ,kBAAkB,CAE3C,OAASC,OAAO,KAAQ,aAAa,CACrC,MAAO,CAAAC,OAAO,KAAM,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAExC,KAAM,CAAAC,YAAY,CAAGC,IAAA,EAGf,IAHgB,CACpBC,SAAS,CAAEC,SAAS,CACpBC,IAAI,CAAE,CAAEC,eAAe,CAAEC,OAAQ,CACnC,CAAC,CAAAL,IAAA,CACC,GAAIK,OAAO,CAAE,mBAAOP,IAAA,CAACF,OAAO,GAAE,CAAC,CAC/B,GAAIQ,eAAe,CAAE,mBAAON,IAAA,CAACI,SAAS,GAAE,CAAC,CAEzC,mBAAOJ,IAAA,CAACJ,QAAQ,EAACY,EAAE,CAAC,QAAQ,CAAE,CAAC,CACjC,CAAC,CAMD,KAAM,CAAAC,eAAe,CAAIC,KAAK,GAAM,CAClCL,IAAI,CAAEK,KAAK,CAACL,IACd,CAAC,CAAC,CAEF,cAAe,CAAAR,OAAO,CAACY,eAAe,CAAC,CAACR,YAAY,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}