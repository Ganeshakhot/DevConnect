{"ast":null,"code":"import api from'../utils/api';import{setAlert}from'./alert';import{REGISTER_SUCCESS,REGISTER_FAIL,USER_LOADED,AUTH_ERROR,LOGIN_SUCCESS,LOGIN_FAIL,LOGOUT}from'./types';/*\r\n  NOTE: we don't need a config object for axios as the\r\n default headers in axios are already Content-Type: application/json\r\n also axios stringifies and parses JSON for you, so no need for \r\n JSON.stringify or JSON.parse\r\n*/ // Load User\nexport const loadUser=()=>async dispatch=>{try{const res=await api.get('/auth');dispatch({type:USER_LOADED,payload:res.data});}catch(err){dispatch({type:AUTH_ERROR});}};// Register User\nexport const register=formData=>async dispatch=>{try{const res=await api.post('/users',formData);dispatch({type:REGISTER_SUCCESS,payload:res.data});dispatch(loadUser());}catch(err){const errors=err.response.data.errors;if(errors){errors.forEach(error=>dispatch(setAlert(error.msg,'danger')));}dispatch({type:REGISTER_FAIL});}};// Login User\nexport const login=(email,password)=>async dispatch=>{const body={email,password};try{const res=await api.post('/auth',body);dispatch({type:LOGIN_SUCCESS,payload:res.data});dispatch(loadUser());}catch(err){const errors=err.response.data.errors;if(errors){errors.forEach(error=>dispatch(setAlert(error.msg,'danger')));}dispatch({type:LOGIN_FAIL});}};// Logout\nexport const logout=()=>({type:LOGOUT});","map":{"version":3,"names":["api","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","res","get","type","payload","data","err","register","formData","post","errors","response","forEach","error","msg","login","email","password","body","logout"],"sources":["D:/DevConnect/ui/src/actions/auth.js"],"sourcesContent":["import api from '../utils/api';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT\r\n} from './types';\r\n\r\n/*\r\n  NOTE: we don't need a config object for axios as the\r\n default headers in axios are already Content-Type: application/json\r\n also axios stringifies and parses JSON for you, so no need for \r\n JSON.stringify or JSON.parse\r\n*/\r\n\r\n// Load User\r\nexport const loadUser = () => async (dispatch) => {\r\n  try {\r\n    const res = await api.get('/auth');\r\n\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: AUTH_ERROR\r\n    });\r\n  }\r\n};\r\n\r\n// Register User\r\nexport const register = (formData) => async (dispatch) => {\r\n  try {\r\n    const res = await api.post('/users', formData);\r\n\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// Login User\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const body = { email, password };\r\n\r\n  try {\r\n    const res = await api.post('/auth', body);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n\r\n    dispatch({\r\n      type: LOGIN_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// Logout\r\nexport const logout = () => ({ type: LOGOUT });\r\n"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,cAAc,CAC9B,OAASC,QAAQ,KAAQ,SAAS,CAClC,OACEC,gBAAgB,CAChBC,aAAa,CACbC,WAAW,CACXC,UAAU,CACVC,aAAa,CACbC,UAAU,CACVC,MAAM,KACD,SAAS,CAEhB;AACA;AACA;AACA;AACA;AACA,EALA,CAOA;AACA,MAAO,MAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,KAAO,CAAAC,QAAQ,EAAK,CAChD,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAX,GAAG,CAACY,GAAG,CAAC,OAAO,CAAC,CAElCF,QAAQ,CAAC,CACPG,IAAI,CAAET,WAAW,CACjBU,OAAO,CAAEH,GAAG,CAACI,IACf,CAAC,CAAC,CACJ,CAAE,MAAOC,GAAG,CAAE,CACZN,QAAQ,CAAC,CACPG,IAAI,CAAER,UACR,CAAC,CAAC,CACJ,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAY,QAAQ,CAAIC,QAAQ,EAAK,KAAO,CAAAR,QAAQ,EAAK,CACxD,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAX,GAAG,CAACmB,IAAI,CAAC,QAAQ,CAAED,QAAQ,CAAC,CAE9CR,QAAQ,CAAC,CACPG,IAAI,CAAEX,gBAAgB,CACtBY,OAAO,CAAEH,GAAG,CAACI,IACf,CAAC,CAAC,CACFL,QAAQ,CAACD,QAAQ,CAAC,CAAC,CAAC,CACtB,CAAE,MAAOO,GAAG,CAAE,CACZ,KAAM,CAAAI,MAAM,CAAGJ,GAAG,CAACK,QAAQ,CAACN,IAAI,CAACK,MAAM,CAEvC,GAAIA,MAAM,CAAE,CACVA,MAAM,CAACE,OAAO,CAAEC,KAAK,EAAKb,QAAQ,CAACT,QAAQ,CAACsB,KAAK,CAACC,GAAG,CAAE,QAAQ,CAAC,CAAC,CAAC,CACpE,CAEAd,QAAQ,CAAC,CACPG,IAAI,CAAEV,aACR,CAAC,CAAC,CACJ,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAsB,KAAK,CAAGA,CAACC,KAAK,CAAEC,QAAQ,GAAK,KAAO,CAAAjB,QAAQ,EAAK,CAC5D,KAAM,CAAAkB,IAAI,CAAG,CAAEF,KAAK,CAAEC,QAAS,CAAC,CAEhC,GAAI,CACF,KAAM,CAAAhB,GAAG,CAAG,KAAM,CAAAX,GAAG,CAACmB,IAAI,CAAC,OAAO,CAAES,IAAI,CAAC,CAEzClB,QAAQ,CAAC,CACPG,IAAI,CAAEP,aAAa,CACnBQ,OAAO,CAAEH,GAAG,CAACI,IACf,CAAC,CAAC,CAEFL,QAAQ,CAACD,QAAQ,CAAC,CAAC,CAAC,CACtB,CAAE,MAAOO,GAAG,CAAE,CACZ,KAAM,CAAAI,MAAM,CAAGJ,GAAG,CAACK,QAAQ,CAACN,IAAI,CAACK,MAAM,CAEvC,GAAIA,MAAM,CAAE,CACVA,MAAM,CAACE,OAAO,CAAEC,KAAK,EAAKb,QAAQ,CAACT,QAAQ,CAACsB,KAAK,CAACC,GAAG,CAAE,QAAQ,CAAC,CAAC,CAAC,CACpE,CAEAd,QAAQ,CAAC,CACPG,IAAI,CAAEN,UACR,CAAC,CAAC,CACJ,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAsB,MAAM,CAAGA,CAAA,IAAO,CAAEhB,IAAI,CAAEL,MAAO,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}